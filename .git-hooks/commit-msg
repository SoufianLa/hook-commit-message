#!/usr/bin/env sh

commit_msg_type_regex='feat|fix|refactor|style|test|docs|build|chore|ci|perf|merge'
commit_msg_scope_regex='.{1,20}'
commit_msg_subject_regex='.{1,100}'
commit_msg_regex="^(${commit_msg_type_regex})(\(${commit_msg_scope_regex}\))?: (${commit_msg_subject_regex})\$"
commit_message=$(cat "$1")
if ! [[ "$commit_message" =~ ${commit_msg_regex} ]]; then
cat << EOF
 /!\ Error format your commit message !

- The commit message should be structured as follows:

   <type>[optional scope]: <description>

      [optional body]

   [optional footer(s)]

- Example:

   feat: add hat wobble
   ^--^  ^------------^
   |     |
   |     +-> Summary in present tense.
   |
   +-------> Type: chore, docs, feat, fix, refactor, style, or test.

More Examples:

 - feat: (new feature for the user, not a new feature for build script)
 - fix: (bug fix for the user, not a fix to a build script)
 - docs: (changes to the documentation)
 - style: (formatting, missing semi colons, etc; no production code change)
 - refactor: (refactoring production code, eg. renaming a variable)
 - test: (adding missing tests, refactoring tests; no production code change)
 - chore: (updating grunt tasks etc; no production code change)
 - ci: (ops related to ci)
 - perf: Update code performances
 - merge: merge branches

EOF
exit 1
fi
